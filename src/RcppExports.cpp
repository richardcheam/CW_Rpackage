// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// badCharacterHeuristic
void badCharacterHeuristic(const std::string& pattern, std::vector<int>& badChar);
RcppExport SEXP _CWRpackage_badCharacterHeuristic(SEXP patternSEXP, SEXP badCharSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type badChar(badCharSEXP);
    badCharacterHeuristic(pattern, badChar);
    return R_NilValue;
END_RCPP
}
// goodSuffixHeuristic
void goodSuffixHeuristic(const std::string& pattern, std::vector<int>& goodSuffix, std::vector<int>& suffix);
RcppExport SEXP _CWRpackage_goodSuffixHeuristic(SEXP patternSEXP, SEXP goodSuffixSEXP, SEXP suffixSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type goodSuffix(goodSuffixSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type suffix(suffixSEXP);
    goodSuffixHeuristic(pattern, goodSuffix, suffix);
    return R_NilValue;
END_RCPP
}
// boyer_moore_search_Rcpp
std::vector<int> boyer_moore_search_Rcpp(std::string text, std::string pattern);
RcppExport SEXP _CWRpackage_boyer_moore_search_Rcpp(SEXP textSEXP, SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::string >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(boyer_moore_search_Rcpp(text, pattern));
    return rcpp_result_gen;
END_RCPP
}
// aho_corasick_Rcpp
List aho_corasick_Rcpp(std::string text, std::vector<std::string> patterns);
RcppExport SEXP _CWRpackage_aho_corasick_Rcpp(SEXP textSEXP, SEXP patternsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type patterns(patternsSEXP);
    rcpp_result_gen = Rcpp::wrap(aho_corasick_Rcpp(text, patterns));
    return rcpp_result_gen;
END_RCPP
}
// naive_pattern_matching_Rcpp
std::vector<int> naive_pattern_matching_Rcpp(std::string texte, std::string motif);
RcppExport SEXP _CWRpackage_naive_pattern_matching_Rcpp(SEXP texteSEXP, SEXP motifSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type texte(texteSEXP);
    Rcpp::traits::input_parameter< std::string >::type motif(motifSEXP);
    rcpp_result_gen = Rcpp::wrap(naive_pattern_matching_Rcpp(texte, motif));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CWRpackage_badCharacterHeuristic", (DL_FUNC) &_CWRpackage_badCharacterHeuristic, 2},
    {"_CWRpackage_goodSuffixHeuristic", (DL_FUNC) &_CWRpackage_goodSuffixHeuristic, 3},
    {"_CWRpackage_boyer_moore_search_Rcpp", (DL_FUNC) &_CWRpackage_boyer_moore_search_Rcpp, 2},
    {"_CWRpackage_aho_corasick_Rcpp", (DL_FUNC) &_CWRpackage_aho_corasick_Rcpp, 2},
    {"_CWRpackage_naive_pattern_matching_Rcpp", (DL_FUNC) &_CWRpackage_naive_pattern_matching_Rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CWRpackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
